# Generated by Django 5.2.3 on 2025-06-25 03:08

import django.core.validators
import django.db.models.deletion
import simple_history.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('app_associacao', '0005_alter_reparticoesmodel_nome_reparticao_and_more'),
        ('app_associados', '0002_alter_associadomodel_bolsa_familia_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='HistoricalAssociadoModel',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('drive_folder_id', models.CharField(blank=True, max_length=100, null=True)),
                ('cpf', models.CharField(db_index=True, max_length=14, verbose_name='CPF')),
                ('senha_gov', models.CharField(blank=True, help_text='Senha criptografada para segurança.', max_length=128, null=True)),
                ('celular', models.CharField(max_length=15, validators=[django.core.validators.RegexValidator('^\\(\\d{2}\\)\\d{5}-\\d{4}$', 'Número inválido. O telefone deve conter 10 ou 11 dígitos, ex: (48)99999-9999.')])),
                ('celular_correspondencia', models.CharField(default='', max_length=15, validators=[django.core.validators.RegexValidator('^\\(\\d{2}\\)\\d{5}-\\d{4}$', 'Número inválido. O telefone deve conter 10 ou 11 dígitos, ex: (48)99999-9999.')])),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='E-mail')),
                ('senha_google', models.CharField(blank=True, help_text='Senha criptografada para segurança.', max_length=128, null=True)),
                ('senha_site', models.CharField(blank=True, help_text='Senha criptografada para segurança.', max_length=128, null=True)),
                ('foto', models.TextField(blank=True, max_length=100, null=True)),
                ('apelido', models.CharField(blank=True, help_text='Apelido Carinhoso.', max_length=80, null=True, verbose_name='Apelido Carinhoso')),
                ('sexo_biologico', models.CharField(blank=True, choices=[('Masculino', 'Masculino'), ('Feminino', 'Feminino'), ('Undefined ', 'Undefined')], default='Não declarado', max_length=15, verbose_name='Sexo Biológico')),
                ('etnia', models.CharField(blank=True, choices=[('Branco', 'Branco'), ('Pardo', 'Pardo'), ('Preto', 'Preto'), ('Amarelo', 'Amarelo'), ('Indígena', 'Indígena'), ('Outro', 'Outro'), ('Undefined ', 'Undefined')], default='Não declarado', max_length=15, verbose_name='Etnia')),
                ('escolaridade', models.CharField(blank=True, choices=[('Analfabeto', 'Analfabeto'), ('Primário 1/4 série', 'Primário 1/4 série'), ('Fundamental', 'Fundamental'), ('Ensino Médio', 'Ensino Médio'), ('Ensino Superior', 'Ensino Superior'), ('Undefined ', 'Undefined')], default='Não declarado', max_length=20, verbose_name='Escolaridade')),
                ('nome_mae', models.CharField(blank=True, max_length=100, null=True, verbose_name='Nome da Mãe')),
                ('nome_pai', models.CharField(blank=True, max_length=100, null=True, verbose_name='Nome do Pai')),
                ('estado_civil', models.CharField(blank=True, choices=[('solteiro', 'solteiro'), ('solteira', 'solteira'), ('casado', 'casado'), ('casada', 'casada'), ('divorciado', 'divorciado'), ('divorciada', 'divorciada'), ('viúvo', 'viúvo'), ('viúva', 'viúva'), ('união estável', 'união estável'), ('separado judicialmente', 'separado judicialmente'), ('separada judicialmente', 'separada judicialmente'), ('Undefined ', 'Undefined')], default='Não declarado', max_length=50, null=True, verbose_name='Estado Civil')),
                ('recolhe_inss', models.CharField(blank=True, choices=[('Sim', 'Sim'), ('Não', 'Não'), ('Undefined ', 'Undefined')], default='Não declarado', max_length=50, null=True, verbose_name='Recolhe INSS atualmente?')),
                ('recebe_seguro', models.CharField(blank=True, choices=[('Não Recebe', 'Não Recebe'), ('Recebe', 'Recebe'), ('Undefined ', 'Undefined')], default='Não declarado', max_length=50, null=True)),
                ('ja_recebeu_defeso_algumavez', models.CharField(blank=True, choices=[('Sim', 'Sim'), ('Não', 'Não'), ('Undefined ', 'Undefined')], default='Não declarado', max_length=50, null=True, verbose_name='Já Recebeu Seguro Defeso Alguma Vez?')),
                ('relacao_trabalho', models.CharField(blank=True, choices=[('Indicidual Autônomo', 'Individual Autônomo'), ('Economia Familiar', 'Economia Familiar'), ('Regime de Parceria', 'Regime de Parceria'), ('Undefined ', 'Undefined')], default='Não declarado', max_length=255, null=True, verbose_name='Relação de Trabalho')),
                ('comercializa_produtos', models.CharField(blank=True, choices=[('Sim', 'Sim'), ('Não', 'Não'), ('Undefined ', 'Undefined')], default='Não declarado', max_length=250, null=True, verbose_name='Comercializa Produtos')),
                ('outra_fonte_renda', models.CharField(blank=True, choices=[('Não Possui', 'Não Possui'), ('Aposentadoria (INSS)', 'Aposentadoria (INSS)'), ('MEI', 'MEI'), ('Sócio de Empresa', 'Sócio de Empresa'), ('CLT', 'CLT'), ('Servidor Público', 'Servidor Público'), ('Undefined ', 'Undefined')], default='Não declarado', max_length=250, null=True, verbose_name='Possui outra Fonte de Renda?')),
                ('bolsa_familia', models.CharField(blank=True, choices=[('Já recebeu', 'Já recebeu'), ('Nunca recebeu', 'Nunca recebeu'), ('Undefined ', 'Undefined')], default='Não declarado', max_length=50, null=True, verbose_name='Já recebeu Bolsa Família?')),
                ('casa_onde_mora', models.CharField(blank=True, choices=[('Mora em casa prórpia', 'Mora em pasa prórpia'), ('Mora em casa augada', 'Mora em casa augada'), ('Mora em casa cedida', 'Mora em casa cedida'), ('Mora em casa de terceiros', 'Mora em casa de terceiros'), ('Undefined ', 'Undefined')], default='Não declarado', max_length=50, null=True, verbose_name='Mora em:')),
                ('rg_numero', models.CharField(blank=True, db_index=True, max_length=20, null=True, verbose_name='Número do RG')),
                ('rg_orgao', models.CharField(blank=True, choices=[('SSP/AC', 'SSP/AC'), ('SSP/AL', 'SSP/AL'), ('SSP/AP', 'SSP/AP'), ('SSP/AM', 'SSP/AM'), ('SSP/BA', 'SSP/BA'), ('SSP/CE', 'SSP/CE'), ('SSP/DF', 'SSP/DF'), ('SSP/ES', 'SSP/ES'), ('SSP/GO', 'SSP/GO'), ('SSP/MA', 'SSP/MA'), ('SSP/MG', 'SSP/MG'), ('SSP/MS', 'SSP/MS'), ('SSP/MT', 'SSP/MT'), ('SSP/PA', 'SSP/PA'), ('SSP/PB', 'SSP/PB'), ('SSP/PE', 'SSP/PE'), ('SSP/PI', 'SSP/PI'), ('SSP/RJ', 'SSP/RJ'), ('SSP/RN', 'SSP/RN'), ('SSP/RS', 'SSP/RS'), ('SSP/RO', 'SSP/RO'), ('SSP/RR', 'SSP/RR'), ('SSP/SC', 'SSP/SC'), ('SSP/SP', 'SSP/SP'), ('SSP/SE', 'SSP/SE'), ('SSP/TO', 'SSP/TO'), ('UF', 'UF'), ('Undefined ', 'Undefined')], default='Não declarado', max_length=50, verbose_name='RG-Orgão Emissor')),
                ('rg_data_emissao', models.DateField(blank=True, null=True, verbose_name='Data Emissão do RG')),
                ('naturalidade', models.CharField(blank=True, max_length=100, null=True)),
                ('data_nascimento', models.DateField(blank=True, null=True, verbose_name='Data de Nascimento')),
                ('nit', models.CharField(blank=True, db_index=True, max_length=25, null=True, verbose_name='Número do NIT')),
                ('pis', models.CharField(blank=True, max_length=25, null=True, verbose_name='Número do PIS')),
                ('titulo_eleitor', models.CharField(blank=True, max_length=20, null=True, verbose_name='Número do Título de Eleitor')),
                ('caepef', models.CharField(blank=True, max_length=20, null=True, verbose_name='Número do CAEPEF')),
                ('cei', models.CharField(blank=True, max_length=20, null=True, verbose_name='Número do CEI')),
                ('rgp', models.CharField(blank=True, db_index=True, max_length=25, null=True, verbose_name='Número do RGP')),
                ('rgp_data_emissao', models.DateField(blank=True, null=True, verbose_name='Data Emissão do RGP')),
                ('primeiro_registro', models.DateField(blank=True, null=True, verbose_name='Data Primeiro Registro (RGP)')),
                ('rgp_mpa', models.CharField(blank=True, max_length=12, null=True, verbose_name='Mapa do RGP')),
                ('ctps', models.CharField(blank=True, db_index=True, max_length=25, null=True, verbose_name='Número Carteira Trabalho (CTPS)')),
                ('ctps_serie', models.CharField(blank=True, max_length=25, null=True, verbose_name='CTPS - Série')),
                ('ctps_data_emissao', models.DateField(blank=True, null=True, verbose_name='Data Emissão da CTPS')),
                ('ctps_uf', models.CharField(blank=True, choices=[('AC', 'Acre'), ('AL', 'Alagoas'), ('AP', 'Amapá'), ('AM', 'Amazonas'), ('BA', 'Bahia'), ('CE', 'Ceará'), ('DF', 'Distrito Federal'), ('ES', 'Espírito Santo'), ('GO', 'Goiás'), ('MA', 'Maranhão'), ('MT', 'Mato Grosso'), ('MS', 'Mato Grosso do Sul'), ('MG', 'Minas Gerais'), ('PA', 'Pará'), ('PB', 'Paraíba'), ('PR', 'Paraná'), ('PE', 'Pernambuco'), ('PI', 'Piauí'), ('RJ', 'Rio de Janeiro'), ('RN', 'Rio Grande do Norte'), ('RS', 'Rio Grande do Sul'), ('RO', 'Rondônia'), ('RR', 'Roraima'), ('SC', 'Santa Catarina'), ('SP', 'São Paulo'), ('SE', 'Sergipe'), ('TO', 'Tocantins'), ('Undefined ', 'Undefined')], default='Não declarado', max_length=50, null=True, verbose_name='CTPS UF')),
                ('cnh', models.CharField(blank=True, db_index=True, max_length=25, null=True, verbose_name='Núm. Registro da CNH')),
                ('cnh_data_emissao', models.DateField(blank=True, null=True, verbose_name='Data Emissão da CNH')),
                ('cnh_data_validade', models.DateField(blank=True, null=True, verbose_name='Data Validade da CNH')),
                ('cnh_uf', models.CharField(blank=True, choices=[('AC', 'Acre'), ('AL', 'Alagoas'), ('AP', 'Amapá'), ('AM', 'Amazonas'), ('BA', 'Bahia'), ('CE', 'Ceará'), ('DF', 'Distrito Federal'), ('ES', 'Espírito Santo'), ('GO', 'Goiás'), ('MA', 'Maranhão'), ('MT', 'Mato Grosso'), ('MS', 'Mato Grosso do Sul'), ('MG', 'Minas Gerais'), ('PA', 'Pará'), ('PB', 'Paraíba'), ('PR', 'Paraná'), ('PE', 'Pernambuco'), ('PI', 'Piauí'), ('RJ', 'Rio de Janeiro'), ('RN', 'Rio Grande do Norte'), ('RS', 'Rio Grande do Sul'), ('RO', 'Rondônia'), ('RR', 'Roraima'), ('SC', 'Santa Catarina'), ('SP', 'São Paulo'), ('SE', 'Sergipe'), ('TO', 'Tocantins'), ('Undefined ', 'Undefined')], default='Não declarado', max_length=50, null=True, verbose_name='CNH UF')),
                ('logradouro', models.CharField(blank=True, help_text='Ex: Rua, Servidão, Travessa', max_length=255, null=True, verbose_name='Logradouro')),
                ('bairro', models.CharField(blank=True, max_length=100, null=True)),
                ('numero', models.CharField(blank=True, default='', max_length=10, null=True, verbose_name='Número')),
                ('complemento', models.CharField(blank=True, max_length=255, null=True)),
                ('cep', models.CharField(blank=True, default='', max_length=9, null=True, validators=[django.core.validators.RegexValidator('^\\d{5}-\\d{3}$', 'CEP deve estar no formato 00000-000')], verbose_name='CEP')),
                ('municipio', models.CharField(blank=True, max_length=100, null=True)),
                ('uf', models.CharField(blank=True, choices=[('AC', 'Acre'), ('AL', 'Alagoas'), ('AP', 'Amapá'), ('AM', 'Amazonas'), ('BA', 'Bahia'), ('CE', 'Ceará'), ('DF', 'Distrito Federal'), ('ES', 'Espírito Santo'), ('GO', 'Goiás'), ('MA', 'Maranhão'), ('MT', 'Mato Grosso'), ('MS', 'Mato Grosso do Sul'), ('MG', 'Minas Gerais'), ('PA', 'Pará'), ('PB', 'Paraíba'), ('PR', 'Paraná'), ('PE', 'Pernambuco'), ('PI', 'Piauí'), ('RJ', 'Rio de Janeiro'), ('RN', 'Rio Grande do Norte'), ('RS', 'Rio Grande do Sul'), ('RO', 'Rondônia'), ('RR', 'Roraima'), ('SC', 'Santa Catarina'), ('SP', 'São Paulo'), ('SE', 'Sergipe'), ('TO', 'Tocantins'), ('Undefined ', 'Undefined')], default='Não declarado', max_length=50, null=True, verbose_name='Estado')),
                ('data_filiacao', models.DateField(null=True, verbose_name='Data da Filiação')),
                ('data_desfiliacao', models.DateField(blank=True, null=True, verbose_name='Data da Desfiliação')),
                ('status', models.CharField(blank=True, choices=[('associado_lista_ativo', 'Associado Lista Ativos(a)'), ('associado_lista_aposentado', 'Associado Lista Aposentados(a)'), ('candidato', 'Candidato(a)'), ('cliente_especials', 'Cliente Especial'), ('desassociado', 'Desassociado(a)')], default='Candidato(a)', max_length=40, null=True, verbose_name='Status de atividade')),
                ('especie1', models.CharField(blank=True, choices=[('Abrótea', 'Abrótea (Phycis phycis)'), ('Anchova', 'Anchova (Pomatomus saltatrix)'), ('Atum', 'Atum (Thunnus spp.)'), ('Bagre', 'Bagre (Siluriformes)'), ('Baiacu', 'Baiacu (Tetraodontidae)'), ('Camarão Branco', 'Camarão Branco (Litopenaeus schmitti)'), ('Camarão Rosa', 'Camarão Rosa (Farfantepenaeus paulensis)'), ('Cação', 'Cação (Ginglymostomatidae)'), ('Cavala', 'Cavala (Scomberomorus cavalla)'), ('Corvina', 'Corvina (Micropogonias furnieri)'), ('Garoupa', 'Garoupa (Epinephelus marginatus)'), ('Linguado', 'Linguado (Paralichthys orbignyanus)'), ('Marisco', 'Marisco (Bivalvia)'), ('Pampo', 'Pampo (Trachinotus carolinus)'), ('Parati', 'Parati (Mugil curema)'), ('Pescada Olhuda', 'Pescada Olhuda (Cynoscion guatucupa)'), ('Pescada Branca', 'Pescada Branca (Cynoscion leiarchus)'), ('Robalo', 'Robalo (Centropomus undecimalis)'), ('Sardinha', 'Sardinha (Sardinella brasiliensis)'), ('Tainha', 'Tainha (Mugil liza)'), ('Xerelete', 'Xerelete (Caranx hippos)'), ('Não declarado', 'Não declarado')], default='Não declarado', max_length=50, null=True, verbose_name='Espécie 1')),
                ('quantidade1', models.CharField(blank=True, max_length=12, null=True, verbose_name='Quantidade 1 (Kg)')),
                ('preco1', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True, verbose_name='Preço por Kg - Espécie 1 (R$)')),
                ('especie2', models.CharField(blank=True, choices=[('Abrótea', 'Abrótea (Phycis phycis)'), ('Anchova', 'Anchova (Pomatomus saltatrix)'), ('Atum', 'Atum (Thunnus spp.)'), ('Bagre', 'Bagre (Siluriformes)'), ('Baiacu', 'Baiacu (Tetraodontidae)'), ('Camarão Branco', 'Camarão Branco (Litopenaeus schmitti)'), ('Camarão Rosa', 'Camarão Rosa (Farfantepenaeus paulensis)'), ('Cação', 'Cação (Ginglymostomatidae)'), ('Cavala', 'Cavala (Scomberomorus cavalla)'), ('Corvina', 'Corvina (Micropogonias furnieri)'), ('Garoupa', 'Garoupa (Epinephelus marginatus)'), ('Linguado', 'Linguado (Paralichthys orbignyanus)'), ('Marisco', 'Marisco (Bivalvia)'), ('Pampo', 'Pampo (Trachinotus carolinus)'), ('Parati', 'Parati (Mugil curema)'), ('Pescada Olhuda', 'Pescada Olhuda (Cynoscion guatucupa)'), ('Pescada Branca', 'Pescada Branca (Cynoscion leiarchus)'), ('Robalo', 'Robalo (Centropomus undecimalis)'), ('Sardinha', 'Sardinha (Sardinella brasiliensis)'), ('Tainha', 'Tainha (Mugil liza)'), ('Xerelete', 'Xerelete (Caranx hippos)'), ('Não declarado', 'Não declarado')], default='Não declarado', max_length=50, null=True, verbose_name='Espécie 2')),
                ('quantidade2', models.CharField(blank=True, max_length=12, null=True, verbose_name='Quantidade 2 (Kg)')),
                ('preco2', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True, verbose_name='Preço por Kg - Espécie 2 (R$)')),
                ('especie3', models.CharField(blank=True, choices=[('Abrótea', 'Abrótea (Phycis phycis)'), ('Anchova', 'Anchova (Pomatomus saltatrix)'), ('Atum', 'Atum (Thunnus spp.)'), ('Bagre', 'Bagre (Siluriformes)'), ('Baiacu', 'Baiacu (Tetraodontidae)'), ('Camarão Branco', 'Camarão Branco (Litopenaeus schmitti)'), ('Camarão Rosa', 'Camarão Rosa (Farfantepenaeus paulensis)'), ('Cação', 'Cação (Ginglymostomatidae)'), ('Cavala', 'Cavala (Scomberomorus cavalla)'), ('Corvina', 'Corvina (Micropogonias furnieri)'), ('Garoupa', 'Garoupa (Epinephelus marginatus)'), ('Linguado', 'Linguado (Paralichthys orbignyanus)'), ('Marisco', 'Marisco (Bivalvia)'), ('Pampo', 'Pampo (Trachinotus carolinus)'), ('Parati', 'Parati (Mugil curema)'), ('Pescada Olhuda', 'Pescada Olhuda (Cynoscion guatucupa)'), ('Pescada Branca', 'Pescada Branca (Cynoscion leiarchus)'), ('Robalo', 'Robalo (Centropomus undecimalis)'), ('Sardinha', 'Sardinha (Sardinella brasiliensis)'), ('Tainha', 'Tainha (Mugil liza)'), ('Xerelete', 'Xerelete (Caranx hippos)'), ('Não declarado', 'Não declarado')], default='Não declarado', max_length=50, null=True, verbose_name='Espécie 3')),
                ('quantidade3', models.CharField(blank=True, max_length=12, null=True, verbose_name='Quantidade 3 (Kg)')),
                ('preco3', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True, verbose_name='Preço por Kg - Espécie 3 (R$)')),
                ('especie4', models.CharField(blank=True, choices=[('Abrótea', 'Abrótea (Phycis phycis)'), ('Anchova', 'Anchova (Pomatomus saltatrix)'), ('Atum', 'Atum (Thunnus spp.)'), ('Bagre', 'Bagre (Siluriformes)'), ('Baiacu', 'Baiacu (Tetraodontidae)'), ('Camarão Branco', 'Camarão Branco (Litopenaeus schmitti)'), ('Camarão Rosa', 'Camarão Rosa (Farfantepenaeus paulensis)'), ('Cação', 'Cação (Ginglymostomatidae)'), ('Cavala', 'Cavala (Scomberomorus cavalla)'), ('Corvina', 'Corvina (Micropogonias furnieri)'), ('Garoupa', 'Garoupa (Epinephelus marginatus)'), ('Linguado', 'Linguado (Paralichthys orbignyanus)'), ('Marisco', 'Marisco (Bivalvia)'), ('Pampo', 'Pampo (Trachinotus carolinus)'), ('Parati', 'Parati (Mugil curema)'), ('Pescada Olhuda', 'Pescada Olhuda (Cynoscion guatucupa)'), ('Pescada Branca', 'Pescada Branca (Cynoscion leiarchus)'), ('Robalo', 'Robalo (Centropomus undecimalis)'), ('Sardinha', 'Sardinha (Sardinella brasiliensis)'), ('Tainha', 'Tainha (Mugil liza)'), ('Xerelete', 'Xerelete (Caranx hippos)'), ('Não declarado', 'Não declarado')], default='Não declarado', max_length=50, null=True, verbose_name='Espécie 4')),
                ('quantidade4', models.CharField(blank=True, max_length=12, null=True, verbose_name='Quantidade 4 (Kg)')),
                ('preco4', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True, verbose_name='Preço por Kg - Espécie 4 (R$)')),
                ('especie5', models.CharField(blank=True, choices=[('Abrótea', 'Abrótea (Phycis phycis)'), ('Anchova', 'Anchova (Pomatomus saltatrix)'), ('Atum', 'Atum (Thunnus spp.)'), ('Bagre', 'Bagre (Siluriformes)'), ('Baiacu', 'Baiacu (Tetraodontidae)'), ('Camarão Branco', 'Camarão Branco (Litopenaeus schmitti)'), ('Camarão Rosa', 'Camarão Rosa (Farfantepenaeus paulensis)'), ('Cação', 'Cação (Ginglymostomatidae)'), ('Cavala', 'Cavala (Scomberomorus cavalla)'), ('Corvina', 'Corvina (Micropogonias furnieri)'), ('Garoupa', 'Garoupa (Epinephelus marginatus)'), ('Linguado', 'Linguado (Paralichthys orbignyanus)'), ('Marisco', 'Marisco (Bivalvia)'), ('Pampo', 'Pampo (Trachinotus carolinus)'), ('Parati', 'Parati (Mugil curema)'), ('Pescada Olhuda', 'Pescada Olhuda (Cynoscion guatucupa)'), ('Pescada Branca', 'Pescada Branca (Cynoscion leiarchus)'), ('Robalo', 'Robalo (Centropomus undecimalis)'), ('Sardinha', 'Sardinha (Sardinella brasiliensis)'), ('Tainha', 'Tainha (Mugil liza)'), ('Xerelete', 'Xerelete (Caranx hippos)'), ('Não declarado', 'Não declarado')], default='Não declarado', max_length=50, null=True, verbose_name='Espécie 5')),
                ('quantidade5', models.CharField(blank=True, max_length=12, null=True, verbose_name='Quantidade 5 (Kg)')),
                ('preco5', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True, verbose_name='Preço por Kg - Espécie 5 (R$)')),
                ('data_atualizacao', models.DateField(blank=True, editable=False)),
                ('content', models.TextField(blank=True, null=True, verbose_name='Anotações')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('associacao', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='app_associacao.associacaomodel', verbose_name='Associação')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('municipio_circunscricao', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='app_associacao.municipiosmodel', verbose_name='Município de Circunscrição/Atuação')),
                ('profissao', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='app_associacao.profissoesmodel', verbose_name='Profissão')),
                ('reparticao', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='app_associacao.reparticoesmodel', verbose_name='Repartição')),
                ('user', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Usuário Associado')),
            ],
            options={
                'verbose_name': 'historical associado model',
                'verbose_name_plural': 'historical associado models',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
    ]
